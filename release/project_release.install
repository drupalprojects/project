<?php

function project_release_install() {
  // Load the code to define the default project_release node type and run it.
  require_once dirname(__FILE__)  . '/includes/project_release_node_type.inc';
  _project_release_create_release_node_type();
}

/**
 * Implementation of hook_uninstall().
 */
function project_release_uninstall() {

  // Load the code to define the default project_release node type and run it.
  require_once dirname(__FILE__)  . '/includes/project_release_node_type.inc';
  require_once dirname(__FILE__)  . '/project_release.module';
  _project_release_delete_release_node_type();

  // @todo
  $variables = array(
    'project_release_active_compatibility_tids',
    'project_release_api_vocabulary',
    'project_release_directory',
    'project_release_overview',
    'project_release_unmoderate',
    'project_release_file_extensions',
    'project_release_version_extra_weights',
  );
  foreach (project_release_release_node_types() as $node_type) {
    $variables[] = 'project_release_download_base_' . $node_type;
    $variables[] = 'project_release_version_format_' . $node_type;
  }
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implementation of hook_schema().
 */
function project_release_schema() {
  $schema['project_release_supported_versions'] = array(
    'description' => 'Table used to store information about which major versions of a project are supported and/or recommended.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {project_projects}.nid of the project_project node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'Primary Key: The {term_data}.tid of the API compatability version associated with a major version of a project.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'major' => array(
        'description' => 'Primary Key: The field_release_version_major of a release node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'supported' => array(
        'description' => 'A flag to indicate whether or not a given major version of a project is supported.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'recommended' => array(
        'description' => 'A flag to indicate whether or not a given major version of a project is recommended.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'snapshot' => array(
        'description' => 'A flag to indicate whether or not snapshot releases of a major version of a project should be shown in the release download table.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'recommended_release' => array(
        'description' => 'The release node ID of the recommended release node for this API tid and major version (the latest release without any "extra" version info such as "alpha1").',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'latest_release' => array(
        'description' => 'The release node ID of the latest release node for this API tid and major version (even if it has "extra" version info such as "alpha1").',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'latest_security_release' => array(
        'description' => 'The release node ID of the latest release node marked as a "security update" for this API tid and major version.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'tid', 'major'),
  );

  $schema['project_release_package_errors'] = array(
    'description' => 'Table used to store error messages generated by the scripts that package project_release nodes into tarballs.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {node}.nid of the project_release node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'messages' => array(
        'description' => 'The text of any error messages created by the packaging scripts.',
        'type' => 'text',
        'not null' => FALSE,
      )
    ),
    'primary key' => array('nid'),
  );

  $schema['cache_project_release'] = array(
    'description' => 'Cache table used to store the project release download tables.',
    'fields' => array(
      'cid' => array(
        'description' => 'Primary Key: Unique cache ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'A collection of data to cache.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'A Unix timestamp indicating when the cache entry was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'headers' => array(
        'description' => 'Any custom HTTP headers to be added to cached data.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'serialized' => array(
        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'expire' => array('expire')
    ),
  );

  $schema['project_release_project_maintainer'] = array(
    'description' => t('Users who have various per-project maintainer permissions.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Foreign key: {project_projects}.nid of the project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => t('Foreign key: {users}.uid of a user with any project maintainer permissions.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'administer_releases' => array(
        'description' => t('Can this user create and administer releases for the given project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function project_release_update_last_removed() {
  return 6014;
}

/**
 * Ensure project release node type is properly set up.
 */
function project_release_update_7000() {
  $t = get_t();

  $type = array(
    'type' => 'project_release',
    'name' => $t('Release'),
    'base' => 'node_content',
    'description' => $t('A release of a project with a specific version number.'),
    'has_title' => '1',
    'title_label' => $t('Title'),
    'custom' => 1,
    'modified' => 1,
    'locked' => 0,
    'help' => '',
  );

  $type = node_type_set_defaults($type);
  node_type_save($type);
  node_add_body_field($type);

  // Define node workflow and comment settings.
  variable_set('node_options_project_release', array('status', 'revision'));
  variable_set('comment_project_release', COMMENT_NODE_CLOSED);

  // Set the project behavior setting for this node type say it's a release.
  variable_set('project_behavior_project_release', 'project_release');

  // Define default fields and field instances.

  // Project
  $field = array(
    'entity_types' => array(),
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'base',
      'handler_submit' => 'Change handler',
      'handler_settings' => array(
        'target_bundles' => array(
          'project' => 'project',
        ),
      ),
    ),
    'field_name' => 'field_release_project',
    'type' => 'entityreference',
    'module' => 'entityreference',
    'cardinality' => '1',
    'columns' => array(
      'target_id' => array(
        'description' => 'The id of the target entity',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
      ),
    ),
  );
  field_create_field($field);

  $instance = array(
    'bundle' => 'project_release',
    'entity_types' => array(),
    'settings' => array(
      'target_type' => 'node',
      'handler' => 'base',
      'handler_submit' => 'Change handler',
      'handler_settings' => array(
        'target_bundles' => array(
          'project' => 'project',
        ),
        'sort' => array(
          'type' => 'none',
          'property' => 'nid',
          'field' => 'body:value',
          'direction' => 'ASC',
        ),
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
      ),
    ),
    'entity_type' => 'node',
    'required' => 1,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_project',
    'label' => $t('Project'),
    'type' => 'entityreference',
    'module' => 'entityreference',
    'widget' => array(
      'weight' => -1,
      'type' => 'options_select',
      'module' => 'options',
      'active' => 1,
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'path' => '',
      ),
    ),
  );
  field_create_instance($instance);

  $field = array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_version',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  );
  field_create_field($field);

  // Major component of version number.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_major',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Version major',
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_major',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // The minor version number of a release.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_minor',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Version minor',
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_minor',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // The patch level version number of a release.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_patch',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Version patch',
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_patch',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // A text string that can be used to provide additional information about a
  // release. Ex: BETA
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_version_extra',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Version extra',
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_extra',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Numeric code for ordering releases that define "version_extra".
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_ext_weight',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Version extra weight',
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_ext_weight',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // The first span of digits found in version_extra. This is needed because we
  // cannot natural sort natively without a stored procedure.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_version_ext_delta',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Version extra delta',
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version_ext_delta',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  $instance = array(
    'label' => $t('Version'),
    'widget' => array(
      'weight' => '0',
      'type' => 'text_textfield',
      'active' => 1,
      'settings' => array(
        'size' => '60',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'settings' => array(),
        'weight' => 2,
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 1,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_version',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  );
  field_create_instance($instance);

  $field = array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_vcs_label',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  );
  field_create_field($field);

  $instance = array(
    'label' => $t('VCS Label'),
    'widget' => array(
      'weight' => '1',
      'type' => 'text_textfield',
      'active' => 1,
      'settings' => array(
        'size' => '60',
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'settings' => array(),
        'weight' => 3,
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => $t('The label (branch or tag) in a version control system that represents this release.'),
    'default_value' => NULL,
    'field_name' => 'field_release_vcs_label',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  );
  field_create_instance($instance);

  $field = array(
    'translatable' => '0',
    'settings' => array(
      'allowed_values' => array(
        'static' => 'Static',
        'dynamic' => 'Dynamic',
      ),
      'allowed_values_function' => '',
    ),
    'field_name' => 'field_release_build_type',
    'type' => 'list_text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  );
  field_create_field($field);

  $instance = array(
    'label' => $t('Release type'),
    'widget' => array(
      'weight' => '2',
      'type' => 'options_select',
      'active' => 1,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'list_default',
        'settings' => array(),
        'weight' => 4,
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 1,
    'description' => $t("How is this release built? Can be either 'Static' if the files associated with it are built once and remain unchanged (e.g. an official release from a tag), or 'Dynamic' if the files are regularly rebuilt and updated (e.g. a development snapshot rebuilt from the end of a branch)."),
    'default_value' => array(
      0 => array(
        'value' => 'static',
      ),
    ),
    'field_name' => 'field_release_build_type',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  );
  field_create_instance($instance);

  // Flag to record the update status for this release. Allowed values:
  // PROJECT_RELEASE_UPDATE_STATUS_CURRENT (0),
  // PROJECT_RELEASE_UPDATE_STATUS_NOT_CURRENT (1),
  // PROJECT_RELEASE_UPDATE_STATUS_NOT_SECURE (2)
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_update_status',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Update status',
    'widget' => array(
      'weight' => '4',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => '',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'type' => 'hidden',
        'weight' => '13',
        'settings' => array(),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_update_status',
    'entity_type' => 'node',
    'bundle' => 'project_release',
  ));

  // Field collection for release files.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'path' => '',
    ),
    'field_name' => 'field_release_files',
    'type' => 'field_collection',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '-1',
  ));
  field_create_instance(array(
    'label' => 'Release files',
    'widget' => array(
      'weight' => '5',
      'type' => 'field_collection_embed',
      'active' => 0,
      'settings' => array(),
    ),
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'field_collection_fields',
        'weight' => '14',
        'settings' => array(
          'view_mode' => 'full',
        ),
      ),
      'teaser' => array(
        'type' => 'hidden',
        'label' => 'above',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'field_name' => 'field_release_files',
    'entity_type' => 'node',
    'bundle' => 'project_release',
    'default_value' => NULL,
  ));

  // Stores information about files attached to release nodes.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'display_field' => 0,
      'display_default' => 1,
      'uri_scheme' => 'public',
    ),
    'field_name' => 'field_release_file',
    'type' => 'file',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Release file',
    'widget' => array(
      'weight' => '1',
      'type' => 'file_generic',
      'active' => 1,
      'settings' => array(
        'progress_indicator' => 'throbber',
      ),
    ),
    'settings' => array(
      'file_directory' => 'project',
      'file_extensions' => 'zip gz tar bz2 rar tgz tar.gz dmg rpm deb',
      'max_filesize' => '',
      'description_field' => 0,
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'file_default',
        'settings' => array(),
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'description' => '',
    'field_name' => 'field_release_file',
    'entity_type' => 'field_collection_item',
    'bundle' => 'field_release_files',
  ));

  // An MD5 hash of the file.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '32',
    ),
    'field_name' => 'field_release_file_hash',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Release file hash',
    'widget' => array(
      'weight' => '2',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'text_default',
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'text_default',
        'settings' => array(),
        'weight' => 1,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_file_hash',
    'entity_type' => 'field_collection_item',
    'bundle' => 'field_release_files',
  ));

  // Number of times this file has been downloaded. This value is updated by
  // site specific means.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(),
    'field_name' => 'field_release_file_downloads',
    'type' => 'number_integer',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'label' => 'Release file downloads',
    'widget' => array(
      'weight' => '3',
      'type' => 'field_extrawidgets_hidden',
      'active' => 1,
      'settings' => array(
        'formatter' => 'number_integer',
        'formatter_settings' => array(
          'thousand_separator' => ',',
          'prefix_suffix' => 0,
        ),
        'display_empty' => 0,
      ),
    ),
    'settings' => array(
      'min' => '0',
      'max' => '',
      'prefix' => '',
      'suffix' => '',
      'user_register_form' => FALSE,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'type' => 'number_integer',
        'settings' => array(
          'thousand_separator' => ' ',
          'decimal_separator' => '.',
          'scale' => 0,
          'prefix_suffix' => TRUE,
        ),
        'weight' => 2,
      ),
    ),
    'required' => 0,
    'description' => '',
    'default_value' => NULL,
    'field_name' => 'field_release_file_downloads',
    'entity_type' => 'field_collection_item',
    'bundle' => 'field_release_files',
  ));

  // Field to mark if a project has releases.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'allowed_values' => array(
        '0' => '',
        '1' => '',
      ),
      'allowed_values_function' => '',
    ),
    'field_name' => 'field_project_has_releases',
    'type' => 'list_boolean',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'bundle' => 'project',
    'description' => $t(''),
    'entity_type' => 'node',
    'field_name' => 'field_project_has_releases',
    'label' => $t('Has project releases'),
    'widget' => array(
      'weight' => '-1',
      'type' => 'options_onoff',
      'module' => 'options',
      'settings' => array(
        'display_label' => TRUE,
      ),
    ),
    'default_value' => array(
      0 => array(
        'value' => '1',
      ),
    ),
  ));

  // Per-project custom version format string.
  field_create_field(array(
    'translatable' => '0',
    'settings' => array(
      'max_length' => '255',
    ),
    'field_name' => 'field_release_version_format',
    'type' => 'text',
    'active' => '1',
    'locked' => '0',
    'cardinality' => '1',
  ));
  field_create_instance(array(
    'bundle' => 'project',
    'entity_type' => 'node',
    'field_name' => 'field_release_version_format',
    'label' => $t('Custom version format string'),
    'widget' => array(
      'weight' => '0',
      'type' => 'text_textfield',
      'active' => 1,
      'settings' => array(
        'size' => '50',
      ),
    ),
  ));
}

/**
 * project_release_download_base is now per-node-type.
 */
function project_release_update_7001() {
  $download_base = variable_get('project_release_download_base', '');
  foreach (project_release_release_node_types() as $node_type) {
    variable_set('project_release_download_base_' . $node_type, $download_base);
  }
  variable_del('project_release_download_base');
}

/**
 * Remove the project_release_browse_versions setting, which no longer exists.
 */
function project_release_update_7002() {
  variable_del('project_release_browse_versions');
}

/**
 * project_release_default_version_format is now per-node-type.
 */
function project_release_update_7003() {
  $version_format = variable_get('project_release_default_version_format', '');
  foreach (project_release_release_node_types() as $node_type) {
    variable_set('project_release_version_format_' . $node_type, $version_format);
  }
  variable_del('project_release_default_version_format');
}

/* todo
 Migrate project node data:
 - {project_release_projects}.releases -> field_project_has_releases
 - {project_release_projects}.version_format -> field_release_version_format

 Migrate release node data:
 */
