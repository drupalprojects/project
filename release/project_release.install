<?php

function project_release_install() {
  // Load the code to define the default project_release node type and run it.
  require_once dirname(__FILE__)  . '/includes/project_release_node_type.inc';
  _project_release_create_release_node_type();
}

/**
 * Implementation of hook_uninstall().
 */
function project_release_uninstall() {

  // Load the code to define the default project_release node type and run it.
  require_once dirname(__FILE__)  . '/includes/project_release_node_type.inc';
  _project_release_delete_release_node_type();

  // @todo
  $variables = array(
    'project_release_active_compatibility_tids',
    'project_release_api_vocabulary',
    'project_release_browse_versions',
    'project_release_default_version_format',
    'project_release_directory',
    'project_release_download_base',
    'project_release_overview',
    'project_release_unmoderate',
    'project_release_file_extensions',
    'project_release_version_extra_weights',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Implementation of hook_schema().
 */
function project_release_schema() {
  $schema['project_release_file'] = array(
    'description' => 'Stores information about files attached to release nodes.',
    'fields' => array(
      'fid' => array(
        'description' => 'Foreign Key: {files}.fid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'Foreign Key: {project_release_nodes}.nid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'filehash' => array(
        'description' => 'An MD5 hash of the file.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Weight of this file in relation to other files in this release.',
      ),
      'downloads' => array(
        'description' => 'Number of times this file has been downloaded. This value is updated by site specific means.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('fid'),
    'indexes' => array('nid' => array('nid')),
  );

  $schema['project_release_projects'] = array(
    'description' => 'Table used to store release specific information about projects.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {project_projects}.nid of the project_project node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'releases' => array(
        'description' => 'A flag indicating whether or not releases are enabled for a project.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => FALSE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'version_format' => array(
        'description' => 'A string used to designate the format of the {project_release_nodes}.version field for releases of a project.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid'),
    'indexes' => array(
      'project_release_projects_releases' => array('releases')
    ),
  );

  $schema['project_release_supported_versions'] = array(
    'description' => 'Table used to store information about which major versions of a project are supported and/or recommended.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {project_projects}.nid of the project_project node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'description' => 'Primary Key: The {term_data}.tid of the API compatability version associated with a major version of a project.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'major' => array(
        'description' => 'Primary Key: The {project_release_nodes}.version_major of a release node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'supported' => array(
        'description' => 'A flag to indicate whether or not a given major version of a project is supported.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'recommended' => array(
        'description' => 'A flag to indicate whether or not a given major version of a project is recommended.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'snapshot' => array(
        'description' => 'A flag to indicate whether or not snapshot releases of a major version of a project should be shown in the release download table.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'recommended_release' => array(
        'description' => 'The {project_release_nodes}.nid of the recommended release node for this API tid and major version (the latest release without any "extra" version info such as "alpha1").',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'latest_release' => array(
        'description' => 'The {project_release_nodes}.nid of the latest release node for this API tid and major version (even if it has "extra" version info such as "alpha1").',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'latest_security_release' => array(
        'description' => 'The {project_release_nodes}.nid of the latest release node marked as a "security update" for this API tid and major version.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'tid', 'major'),
  );

  $schema['project_release_package_errors'] = array(
    'description' => 'Table used to store error messages generated by the scripts that package project_release nodes into tarballs.',
    'fields' => array(
      'nid' => array(
        'description' => 'Primary Key: The {node}.nid of the project_release node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'messages' => array(
        'description' => 'The text of any error messages created by the packaging scripts.',
        'type' => 'text',
        'not null' => FALSE,
      )
    ),
    'primary key' => array('nid'),
  );

  $schema['cache_project_release'] = array(
    'description' => 'Cache table used to store the project release download tables.',
    'fields' => array(
      'cid' => array(
        'description' => 'Primary Key: Unique cache ID.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'data' => array(
        'description' => 'A collection of data to cache.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'expire' => array(
        'description' => 'A Unix timestamp indicating when the cache entry should expire, or 0 for never.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'A Unix timestamp indicating when the cache entry was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'headers' => array(
        'description' => 'Any custom HTTP headers to be added to cached data.',
        'type' => 'text',
        'not null' => FALSE,
      ),
      'serialized' => array(
        'description' => 'A flag to indicate whether content is serialized (1) or not (0).',
        'type' => 'int',
        'size' => 'small',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'expire' => array('expire')
    ),
  );

  $schema['project_release_project_maintainer'] = array(
    'description' => t('Users who have various per-project maintainer permissions.'),
    'fields' => array(
      'nid' => array(
        'description' => t('Foreign key: {project_projects}.nid of the project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => t('Foreign key: {users}.uid of a user with any project maintainer permissions.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'administer_releases' => array(
        'description' => t('Can this user create and administer releases for the given project.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function project_release_update_last_removed() {
  return 6012;
}
