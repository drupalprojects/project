<?php

class ProjectWebTestCase extends DrupalWebTestCase {
  /**
   * Setup basic tasks for all project issue tests.
   */
  function setUp($modules = array()) {
    $modules = array_merge(array('project'), $modules);
    parent::setUp($modules);
  }

  /**
   * Assert that a field in the current page is enabled.
   * @TODO Remove this when http://drupal.org/node/882564 is committed.
   *
   * @param $name
   *   name of field to assert.
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  function assertFieldEnabled($name, $message = '') {
    $elements = $this->xpath('//input[@name="' . $name . '"]');
    return $this->assertTrue(isset($elements[0]) && empty($elements[0]['disabled']), $message ? $message : t('Field @name is enabled.', array('@name' => $name)));
  }

  /**
   * Assert that a field in the current page is disabled.
   * @TODO Remove this when http://drupal.org/node/882564 is committed.
   *
   * @param $name
   *   name of field to assert.
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  function assertFieldDisabled($name, $message = '') {
    $elements = $this->xpath('//input[@name="' . $name . '"]');
    return $this->assertTrue(isset($elements[0]) && !empty($elements[0]['disabled']), $message ? $message : t('Field @name is disabled.', array('@name' => $name)));
  }

  /**
   * Assert that a checkbox field in the current page is not checked.
   *
   * @param $name
   *   name of field to assert.
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertNoFieldCheckedByName($name, $message = '') {
    $elements = $this->xpath('//input[@name="' . $name . '"]');
    return $this->assertTrue(isset($elements[0]) && empty($elements[0]['checked']), $message ? $message : t('Checkbox field @id is not checked.', array('@id' => $name)), t('Browser'));
  }

  /**
   * Assert that a checkbox field in the current page is checked.
   *
   * @param $name
   *   name of field to assert.
   * @param $message
   *   Message to display.
   * @return
   *   TRUE on pass, FALSE on fail.
   */
  protected function assertFieldCheckedByName($name, $message = '') {
    $elements = $this->xpath('//input[@name="' . $name . '"]');
    return $this->assertTrue(isset($elements[0]) && !empty($elements[0]['checked']), $message ? $message : t('Checkbox field @id is checked.', array('@id' => $name)), t('Browser'));
  }

  /**
   * Helper function for creating a new project.
   *
   * @param $settings array
   *   An array of form values to be passed to DrupalWebTestCase::drupalPost().
   */
  function createProject($settings = array()) {
    $defaults = array(
      'type' => 'project',
      'title' => $this->randomName(),
      'body' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->randomString(128),
            'format' => filter_default_format()
          )
        )
      ),
      'field_project_type' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => 'full',
          ),
        )
      ),
      'field_project_machine_name' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->randomName(),
          ),
        )
      ),
      'field_project_components' => array(
        LANGUAGE_NONE => array(
          0 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
          2 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
          3 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
          4 => array(
            'value' => $this->randomName(),
            'format' => NULL,
          ),
        )
      ),
    );

    $settings = drupal_array_merge_deep($defaults, $settings);
    return $this->drupalCreateNode($settings);
  }
}


class ProjectTestCase extends ProjectWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Project functionality',
      'description' => 'Test Project module functionality.',
      'group' => 'Project'
    );
  }

  function setUp() {
    parent::setUp(array('path'));
  }

  /**
   * Test that project node type is create properly.
   */
  function testProjectNodeType() {
    $this->assert(array_key_exists('project', node_type_get_names()), t('Project node type is created properly.'));
    $this->assert(project_entity_bundle_is_project('project', 'node'), t('Project node type is considered a field.'));
    $project = $this->createProject(array('type' => 'project'));
    $page = $this->drupalCreateNode(array('type' => 'page'));
    $this->assert(project_node_is_project($project), t('Project node is considered a project.'));
    $this->assertFalse(project_node_is_project($page), t('Non-project node is NOT considered a project.'));

    $loaded_project_node = project_load($project->nid);
    $this->assertEqual($project->title, $loaded_project_node->title, t('Project node loading by nid works correctly.'));
    $loaded_project_node = project_load($project->field_project_machine_name[LANGUAGE_NONE][0]['value']);
    $this->assertEqual($project->title, $loaded_project_node->title, t('Project node loading by machine name works correctly.'));
    $this->assertFalse(project_load($page->nid), t('Project node loading works correctly.'));
  }

//  /**
//   * Test the creation of projects and the display of project properties.
//   */
//  function testProjectCreation() {
//    // Test project node form fields.
//    $this->drupalGet('node/add/project-project');
//    $this->assertText(t('Create Project'));
//
//    // Create a project and verify that all fields are shown.
//    $edit = array();
//    $edit['title'] = $this->randomName();
//    $edit['project[uri]'] = $this->randomName(8);
//    $edit['body'] = $this->randomName(128);
//    $edit['project[homepage]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[documentation]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[license]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[screenshots]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[changelog]'] = 'http://example.com/' . $this->randomName();
//    $edit['project[demo]'] = 'http://example.com/' . $this->randomName();
//    $this->createProject($edit);
//
//    // Check that all links show up properly.
//    $this->drupalGet('project/'. $edit['project[uri]']);
//    $this->assertText($edit['title'], t('Project found using project URI.'));
//    $this->assertLink(t('Home page'));
//    $this->assertRaw($edit['project[homepage]'], t('Project homepage displayed properly.'));
//    $this->assertLink(t('Read documentation'));
//    $this->assertRaw($edit['project[documentation]'], t('Project documentation displayed properly.'));
//    $this->assertLink(t('Read license'));
//    $this->assertRaw($edit['project[license]'], t('Project license displayed properly.'));
//    $this->assertLink(t('Look at screenshots'));
//    $this->assertRaw($edit['project[screenshots]'], t('Project screenshots displayed properly.'));
//    $this->assertLink(t('Read complete log of changes'));
//    $this->assertRaw($edit['project[changelog]'], t('Project changelog displayed properly.'));
//    $this->assertLink(t('Try out a demonstration'));
//    $this->assertRaw($edit['project[demo]'], t('Project changelog displayed properly.'));
//    $this->assertText($edit['body'], t('Project description found.'));
//  }
//
//  function testProjectEdit() {
//    $project = $this->createProject();
//
//    // Check the the URI is properly hidden when updates are not allowed
//    $this->drupalGet('node/'. $project->nid .'/edit');
//    $this->assertFieldByName('project[uri]', '', 'Shortname field displayed correctly');
//
//    variable_set('project_allow_uri_update', FALSE);
//    $this->drupalGet('node/'. $project->nid .'/edit');
//    $this->assertNoFieldByName('project[uri]', '', 'Shortname field locked from editing');
//  }
}

class ProjectMaintainersTestCase extends ProjectWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Project maintainers functionality',
      'description' => 'Test Project module maintainers access control system.',
      'group' => 'Project'
    );
  }


  function setUp() {
    parent::setUp();

    $perms = array('create project content', 'edit own project content', 'delete own project content', 'access user profiles');

    $this->owner = $this->drupalCreateUser($perms);
    $this->drupalLogin($this->owner);

    $this->maintainer = $this->drupalCreateUser($perms);
  }

  /**
   * Test maintainer permissions.
   */
  function testProjectMaintainerPermissions() {
    // Create project, make sure Maintainers link is shown
    $project = $this->createProject(array('uid' => $this->owner->uid));

    // Check that owner can access
    $this->drupalGet("node/$project->nid");
    $this->assertResponse(200, 'Project owner can view project');
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(200, 'Project owner can edit project.');

    // Check the maintainers tab is shown and owner is included correctly
    $this->drupalGet("node/$project->nid");
    $this->assertLink(t('Maintainers'), 0, ('Maintainers tab is shown.'));
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertLink($this->owner->name, 0, ('Project owner is displayed on form.'));
    $this->assertFieldDisabled("maintainers[{$this->owner->uid}][permissions][update project]", 'Checkbox is disabled for project owner');
    $this->assertFieldDisabled("maintainers[{$this->owner->uid}][permissions][administer maintainers]", 'Checkbox is disabled for project owner');
    $this->assertFieldCheckedByName("maintainers[{$this->owner->uid}][permissions][update project]", 'Owners permissions are automatically granted');
    $this->assertFieldCheckedByName("maintainers[{$this->owner->uid}][permissions][administer maintainers]", 'Owners permissions are automatically granted');
    $this->assertNoRaw("node/$project->nid/maintainers/delete/{$this->owner->uid}", 'No delete link is displayed for the project owner.');

    // Try to delete the owner anyway and make sure it fails.
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->owner->uid}");
    $this->assertText("You can not delete the project owner ({$this->owner->name}) as a maintainer.", 'Project owner can not be deleted as a maintainer.');

    // Verify that other users do not have access
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(403, 'Project edit form is protected.');
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(403, 'Project maintainers form is protected.');
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->maintainer->uid}");
    $this->assertResponse(403, 'Project delete maintainer form is protected.');

    // Add a new user and verify that they are added:
    // Login as owner
    $this->drupalLogin($this->owner);
    // Add new user
    $edit = array();
    $edit['new_maintainer[user]'] = $this->maintainer->name;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertLink($this->maintainer->name, 0, 'New user is displayed on form correctly.');
    $this->assertNoFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][update project]", 'Permissions not explicitly granted.');
    $this->assertNoFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][administer maintainers]", 'Permissions not explicitly granted.');

    // Test validation for adding a duplicate maintainer
    $edit = array();
    $edit['new_maintainer[user]'] = $this->maintainer->name;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertText("{$this->maintainer->name} is already a maintainer of this project.", 'Duplicate maintainers are not permitted.');

    // Add permissions to user
    $edit = array();
    $edit["maintainers[{$this->maintainer->uid}][permissions][update project]"] = TRUE;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][update project]", 'Permissions are displayed correctly on maintainers form.');
    // Login as maintainer and check access
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(200, 'User is correctly granted access to project edit form.');
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(403, 'Project maintainers form is protected.');
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->maintainer->uid}");
    $this->assertResponse(403, 'Project delete maintainer form is protected.');

    // Have owner grant administer maintainers permission
    $this->drupalLogin($this->owner);
    // Add permissions to user
    $edit = array();
    $edit["maintainers[{$this->maintainer->uid}][permissions][administer maintainers]"] = TRUE;
    $this->drupalPost("node/$project->nid/maintainers", $edit, t('Update'));
    $this->assertFieldCheckedByName("maintainers[{$this->maintainer->uid}][permissions][administer maintainers]", 'Permissions are displayed correctly on maintainers form.');
    // Login as maintainer and check access
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(200, 'User is correctly granted access to project edit form.');

    // Remove the user from the project
    $this->drupalLogin($this->owner);
    $this->drupalGet("node/$project->nid/maintainers/delete/{$this->maintainer->uid}");
    $this->assertText("Are you sure you want to delete {$this->maintainer->name} as a maintainer of {$project->title}?", 'Deletion page is displayed properly.');
    $this->drupalPost(NULL, array(), t('Delete'));
    $this->assertText("Removed {$this->maintainer->name} as a maintainer.", 'Project maintainer successfully deleted.');
    // Verify that access has been removed
    $this->drupalLogin($this->maintainer);
    $this->drupalGet("node/$project->nid/edit");
    $this->assertResponse(403, 'Project edit form is protected.');
    $this->drupalGet("node/$project->nid/maintainers");
    $this->assertResponse(403, 'Project maintainers form is protected.');
  }
}
