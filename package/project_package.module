<?php

/**
 * @file project_package.module
 * Provides packages made up of releases of other projects.
 */

/**
 * Implement hook_views_api().
 */
function project_package_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'project_package') . '/views',
  );
}

function project_package_node_insert($node) {
  project_package_node_update($node);
}

function project_package_node_update($node) {
  if (project_release_node_is_release($node)) {
    // We can't rely on $node->project_package since nodeapi() doesn't have
    // a fully loaded $node object. :(
    project_package_node_load(array($node));
    if (isset($node->project_package)) {
      // Set the {prn}.update_status for a package based on its included items.
      $max = db_query("SELECT MAX(prn.update_status) FROM {project_release_nodes} prn INNER JOIN {project_package_local_release_item} pp ON prn.nid = pp.item_nid WHERE pp.package_nid = :nid", array(':nid' => $node->nid))->fetchField();
      db_query("UPDATE {project_release_nodes} SET update_status = :max WHERE nid = :nid", array(':max' => $max, ':nid' => $node->nid));
    }
  }
}

function project_package_node_load($nodes) {
  foreach ($nodes as $node) {
    if (project_release_node_is_release($node)) {
      $count = db_query("SELECT COUNT(*) FROM {project_package_local_release_item} WHERE package_nid = :nid", array(':nid' => $node->nid))->fetchField();
      if (!empty($count)) {
        $node->project_package['count'] = $count;
      }
    }
  }
}

function project_package_node_view($node, $view_mode, $langcode) {
  if (project_release_node_is_release($node)) {
    // If this release has any packaged local items, embed the view of those.
    if (!empty($node->project_package['count'])) {
      $view_info = variable_get('project_package_release_items_view', 'project_package_local_items:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_items'] = array(
        '#prefix' => '<h3>' . t('In this package') . '</h3>',
        '#value' => '<div class="project-release-package-items">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 2,
      );
    }

    // Embed a view into the release node output for local patches.
    $has_local_patches = db_query("SELECT item_nid FROM {project_package_local_patch} WHERE package_nid = :nid LIMIT 1", array(':nid' => $node->nid))->fetchField();
    if (!empty($has_local_patches)) {
      $view_info = variable_get('project_package_local_patches_view', 'project_package_local_patches:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_local_patches'] = array(
        '#prefix' => '<h3>' . t('Patches applied in this package') . '</h3>',
        '#value' => '<div class="project-release-package-local-patches">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 3,
      );
    }

    // Embed a view into the release node output for remote items.
    $has_remote_items = db_query("SELECT id FROM {project_package_remote_item} WHERE package_nid = :nid LIMIT 1", array(':nid' => $node->nid))->fetchField();
    if (!empty($has_remote_items)) {
      $view_info = variable_get('project_package_remote_items_view', 'project_package_remote_items:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_remote_items'] = array(
        '#prefix' => '<h3>' . t('External code in this package') . '</h3>',
        '#value' => '<div class="project-release-package-remote-items">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 4,
      );
    }

    // Embed a view into the release node output for remote patches.
    $has_remote_patches = db_query("SELECT remote_id FROM {project_package_remote_patch} WHERE package_nid = :nid LIMIT 1", array(':nid' => $node->nid))->fetchField();
    if (!empty($has_remote_patches)) {
      $view_info = variable_get('project_package_remote_patches_view', 'project_package_remote_patches:default');
      list($view_name, $display_name) = explode(':', $view_info);
      $node->content['release_package_remote_patches'] = array(
        '#prefix' => '<h3>' . t('Patches applied to external code in this package') . '</h3>',
        '#value' => '<div class="project-release-package-remote-patches">' . views_embed_view($view_name, $display_name, $node->nid) . '</div>',
        '#weight' => 5,
      );
    }
  }
}

/**
 * Fix the {prn}.update_status column whenever the status changes on items.
 */
function project_package_check_update_status($item_nids) {
  $affected_packages = db_query("SELECT package_nid FROM {project_package_local_release_item} WHERE item_nid IN (:nids) GROUP BY package_nid", array(':nids' => $item_nids))->fetchCol();
  if (!empty($affected_packages)) {
    db_query("UPDATE {project_release_nodes} SET update_status = :status WHERE nid IN (:packages)", array(':status' => PROJECT_RELEASE_UPDATE_STATUS_NOT_SECURE, ':packages' => $affected_packages));
  }
}

/**
 * Record a set of local items included in a given packaged release.
 *
 * @param integer $package_nid
 *   The release node ID of the package to record the remote item for.
 * @param aray $local_item_nids
 *   An array of node IDs for the local item(s).
 *
 * @return boolean
 *   TRUE if all items were successfully recorded, otherwise FALSE.
 */
function project_package_record_local_items($package_nid, $local_item_nids) {
  $success = TRUE;
  foreach ($local_item_nids as $item_nid) {
    if (!db_query("INSERT INTO {project_package_local_release_item} (package_nid, item_nid) VALUES (:package, :item)", array(':package' => $package_nid, ':item' => (int) $item_nid))) {
      $success = FALSE;
    }
  }
  return $success;
}

/**
 * Record a remote item (or library) included in a given release.
 *
 * @param integer $package_nid
 *   The release node ID of the package to record the remote item for.
 *
 * @param string $item_url
 *   The fully qualified URL where the remote item lives.
 *
 * @param string $name
 *   A human readable name to be associated with the item.
 */
function project_package_record_remote_item($package_nid, $item_url, $name) {
  // Try to update an existing record, if any.
  $record = (object) array(
    'package_nid' => $package_nid,
    'url' => $item_url,
    'name' => $name,
  );

  $id = db_query("SELECT id FROM {project_package_remote_item} WHERE package_nid = :nid AND url = :url", array(':nid' => $record->package_nid, ':url' => $record->url))->fetchField();
  if ($id) {
    $record->id = $id;
    $update = array('id');
  }
  else {
    $update = array();
  }

  drupal_write_record('project_package_remote_item', $record, $update);

  return $record->id;
}

/**
 * Record a patch file included in a given release package.
 *
 * @param integer $package_nid
 *   The release node ID of the package to record the patch information for.
 *
 * @param string $patch_url
 *   The fully qualified URL where the patch file lives.
 *
 * @param integer $item_id
 *   The local release item ID, or remote item ID to which the patch applies.
 *
 *   This id references either {project_package_local_release_item}.item_nid or
 *   {project_package_remote_item}.id.
 *
 * @param string $item_type
 *   The type of item to which the patch is applied. Either 'local' or 'remote'.
 *
 *   Items marked 'local', correspond to items recorded in
 *   {project_package_local_release_item} and items marked as 'remote'
 *   correspond with items recorded in {project_package_remote_item}.
 */
function project_package_record_patch($package_nid, $patch_url, $item_id, $item_type) {
  global $base_url;

  // See if the patch URL is a local patch
  $url = parse_url($patch_url);
  $local_url = parse_url($base_url);
  $local = ($url['host'] == $local_url['host']);

  // If it is local, see if the patch is attached to a node or comment.
  $patch_issue = array(
    'package_nid' => $package_nid,
    'patch_file_url' => $patch_url,
    ($item_type == 'local' ? 'item_nid' : 'remote_id') => (int) $item_id,
  );
  if ($local) {
    $filepath = substr($url['path'], 1);
    // Check if the file is attached to an issue with comment_upload.
    $related_issue = db_query("SELECT n.nid as nid, n.title as title, cu.cid as cid FROM {files} f LEFT JOIN {comment_upload} cu ON f.fid = cu.fid LEFT JOIN {node} n ON cu.nid = n.nid WHERE filepath = :filepath LIMIT 1", array(':filepath' => $filepath))->fetchObject();

    if ($related_issue) {
      $patch_issue['patch_nid'] = $related_issue->nid;
      $patch_issue['patch_comment_id'] = $related_issue->cid;
      $patch_issue['patch_description_url'] = $related_issue->title;
    }

    // Check if the file is attached to a regular node with upload module.
    if (!isset($patch_issue['patch_nid'])) {
      $node = db_query("SELECT n.nid as nid, n.title as title FROM files f LEFT JOIN upload u ON f.fid = u.fid LEFT JOIN node n ON u.nid = n.nid WHERE filepath = :filepath", array(':filepath' => $filepath))->fetchObject();
      if ($node) {
        $patch_issue['patch_nid'] = $node->nid;
        $patch_issue['patch_description_url'] = $node->title;
      }
    }
  }

  // Finally, save a record into {project_package_(remote|local)_patch}.
  $table = 'project_package_' . $item_type . '_patch';
  $rows = db_select($table, 'pp')
    ->condition('package_nid', $package_nid)
    ->condition('patch_file_url', $patch_url)
    ->countQuery()->execute()->fetchField();
  if ($rows > 0) {
    $query = db_update($table)
      ->condition('package_nid', $package_nid)
      ->condition('patch_file_url', $patch_url);
  }
  else {
    $query = db_insert($table);
  }
  $query->fields($patch_issue)->execute();
}

/**
 * Remove all records containing package contents for a release node.
 */
function project_package_node_delete($node) {
  db_query("DELETE FROM {project_package_local_release_item} WHERE package_nid = :nid", array(':nid' => $node->nid));
  db_query("DELETE FROM {project_package_remote_item} WHERE package_nid = :nid", array(':nid' => $node->nid));
  db_query("DELETE FROM {project_package_local_patch} WHERE package_nid = :nid", array(':nid' => $node->nid));
  db_query("DELETE FROM {project_package_remote_patch} WHERE package_nid = :nid", array(':nid' => $node->nid));
}
