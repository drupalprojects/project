<?php

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Project adjustments to the field edit form.
 */
function project_form_field_ui_field_edit_form_alter(&$form) {
  // field_project_type has certain settings that project depends on, force
  // those here.
  if ($form['#field']['field_name'] == 'field_project_type') {
    $form['field']['#access'] = FALSE;
    $form['instance']['required']['#value'] = TRUE;
    $form['instance']['required']['#access'] = FALSE;
  }
}


/**
 * Determine whether or not a node is a project.
 *
 * @param $node
 *   A node to check.
 */
function project_node_is_project($node) {
  return project_entity_bundle_is_project($node->type, 'node');
}

/**
 * Determine whether or not a node type is considered a project.
 *
 * This function checks for the presence of the project_type field to determine
 * whether or not an entity type is considered a project.
 *
 * @param $bundle_name
 *   The node type to check.
 */
function project_entity_bundle_is_project($bundle_name, $entity_type = 'node') {
  $fields = field_info_fields();
  return in_array($bundle_name, $fields['field_project_type']['bundles'][$entity_type]);
}

/**
 * Retrieve a list of entity bundles that are considered projects.
 *
 * This function checks for the presence of the project_type field to determine
 * which bundles are considered a project.
 *
 * @param $entity_type
 *   The entity type. Default is 'node'. If set to NULL, all types are returned.
 *
 * @return
 *   For all types, an associative array of arrays, keyed on entity type. For
 *   a single entity type, an array of bundle names.
 */
function project_project_entity_bundles($entity_type = 'node') {
  $fields = field_info_fields();
  $project_entities = array();
  if (isset($entity_type)) {
    if (isset($fields['field_project_type']['bundles'][$entity_type])) {
      $project_entities = $fields['field_project_type']['bundles'][$entity_type];
    }
  }
  else {
    $project_entities = $fields['field_project_type']['bundles'];
  }
  return $project_entities;
}
